Metoda `toLocaleString()` je ugrađena metoda u JavaScriptu koja se koristi za formatiranje brojeva, datuma i vremena prema lokalnim postavkama korisnika. Ona vraća string koji predstavlja odgovarajući lokalizirani prikaz zadane vrijednosti.

Ova metoda ima nekoliko različitih primjena, ovisno o vrsti objekta nad kojim se koristi:

1. **Brojevi**: Kada se `toLocaleString()` primijeni na broj, koristi se lokalni format za prikaz brojeva, uključujući odvajanje tisućica, decimalni separator i broj decimalnih mjesta. Na primjer:

   ```javascript
   const number = 1234567.89;
   console.log(number.toLocaleString()); // rezultat će ovisiti o lokalnim postavkama korisnika, npr. "1,234,567.89" u SAD-u
   ```

2. **Datum i vrijeme**: Kada se `toLocaleString()` primijeni na objekt tipa `Date`, metoda će vratiti lokalizirani prikaz datuma i vremena. Format će se prilagoditi prema lokalnim postavkama korisnika. Na primjer:

   ```javascript
   const date = new Date();
   console.log(date.toLocaleString()); // rezultat će ovisiti o lokalnim postavkama korisnika, npr. "6/20/2023, 10:30:45 AM" u SAD-u
   ```

3. **Polje brojeva ili datuma**: Kada se `toLocaleString()` primijeni na polje brojeva ili datuma, svaki element polja će biti lokaliziran koristeći lokalne postavke. Na primjer:

   ```javascript
   const numbers = [1000, 2000, 3000];
   console.log(numbers.toLocaleString()); // rezultat će ovisiti o lokalnim postavkama korisnika, npr. "1,000, 2,000, 3,000" u SAD-u

   const dates = [new Date(), new Date()];
   console.log(dates.toLocaleString()); // rezultat će ovisiti o lokalnim postavkama korisnika, npr. "6/20/2023, 10:30:45 AM, 6/21/2023, 11:15:20 AM" u SAD-u
   ```

Metoda `toLocaleString()` koristi lokalne postavke operacijskog sustava ili preglednika kako bi prilagodila prikaz vrijednosti. To znači da će prikazani format ovisiti o jeziku i zemlji korisnika. Na primjer, u Sjedinjenim Američkim Državama će koristiti format koji je uobičajen za taj prostor, dok će u drugim zemljama koristiti lokalno prihvaćene formate.

Ova metoda je korisna kada želite prikazati brojeve, datume ili vremena u obliku koji je intuitivan i razumljiv za korisnike iz različitih lokalnih okruženja.

// useState
useState je jedan od najosnovnijih React Hook-ova koji omogućuje komponentama da čuvaju i ažuriraju svoje lokalno stanje. Koristi se za definiranje promjenjivih (varijabli) unutar funkcionalnih komponenata React-a.

Korištenje useState-a je vrlo jednostavno. Prvo ga trebate uvesti iz React modula:

```javascript
import React, { useState } from 'react';
```

Zatim možete koristiti useState funkciju u svojoj komponenti. Ona prima početnu vrijednost kao argument i vraća par: trenutnu vrijednost promjenjive i funkciju za ažuriranje te vrijednosti. Primjer koda izgleda ovako:

```javascript
function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <button onClick={() => setCount(count - 1)}>Decrement</button>
    </div>
  );
}
```

U ovom primjeru, useState(0) postavlja početnu vrijednost promjenjive "count" na 0. Nakon toga, koristimo destructuring assignment sintaksu da bismo izdvojili trenutnu vrijednost promjenjive "count" i funkciju "setCount" kojom ćemo ažurirati tu vrijednost.

U JSX-u, prikazujemo trenutnu vrijednost promjenjive "count" unutar `<p>` elementa. Klikom na gumb "Increment" povećavamo vrijednost za 1, a klikom na gumb "Decrement" smanjujemo vrijednost za 1. Ovo postižemo pozivom funkcije "setCount" i prosljeđivanjem nove vrijednosti.

Kada se vrijednost promjenjive ažurira pomoću "setCount" funkcije, React će ponovno izvršiti tijelo komponente i prikazati novu vrijednost promjenjive.

Ovako se koristi useState funkcija u React-u kako bismo definirali i ažurirali lokalno stanje u funkcionalnim komponentama.


// onChange()
U React.js, `onChange()` je događaj (event) koji se aktivira kada se vrednost kontrolnog elementa, poput input polja, selektora (select), itd., promeni tokom interakcije korisnika. Na primer, kada korisnik unese tekst u polje za unos, poziva se `onChange()` događaj, što omogućava da React prati promene vrednosti tog polja i ažurira komponentu na osnovu tih promena.

Sintaksa za `onChange()` izgleda ovako:

```jsx
<input type="text" onChange={handleChange} />
```

U ovom primeru, kada korisnik unese ili izmeni tekst u input polju, `handleChange` funkcija će se pozvati.

Kada koristite `onChange()` događaj, često ćete želeti da pratite vrednost kontrolnog elementa u komponenti. Za to možete koristiti `useState` kuku (hook). `useState` je jedan od najčešće korišćenih kuka u React-u koja omogućava komponenti da ima svoje interno stanje.

Evo kako koristiti `useState` u kombinaciji sa `onChange()` događajem:

```jsx
import React, { useState } from 'react';

const MyComponent = () => {
  const [inputValue, setInputValue] = useState('');

  const handleChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <div>
      <input type="text" value={inputValue} onChange={handleChange} />
      <p>Uneli ste: {inputValue}</p>
    </div>
  );
};

export default MyComponent;
```

U ovom primeru, `useState('')` je inicijalna vrednost stanja `inputValue`, koja je prazan string. `setInputValue` je funkcija koju dobijate od `useState` kuke, koja se koristi za ažuriranje vrednosti stanja `inputValue`. Kada korisnik unese ili izmeni tekst u polju za unos, `handleChange` funkcija se poziva, a zatim postavlja novu vrednost `inputValue` pomoću `setInputValue`, što dovodi do ponovnog renderovanja komponente sa novom vrednošću polja za unos.

Zahvaljujući ovome, vrednost unosa se održava u stanju komponente i može se koristiti u drugim delovima komponente ili prosleđivati drugim komponentama kao prop (svojstvo).

//lifting the state up 
"Lifting the state up" u Reactu može se objasniti kao podizanje stanja komponente. Da bismo bolje razumeli ovu koncepciju, moramo se osvrnuti na osnovne principe React komponenti.

React je JavaScript biblioteka koja se koristi za izgradnju korisničkih interfejsa. Komponente u Reactu su kao samostalni delovi koji mogu sadržavati svoje stanje (state) i prikazivati odgovarajući izgled na osnovu tog stanja. Kada se stanje komponente promeni, React će osvežiti prikaz kako bi odražavao te promene.

"Lifting the state up" se odnosi na situaciju kada stanje koje je inicijalno definisano u nekoj nižoj komponenti (na primer, u nekom detetu u hijerarhiji) premeštamo i držimo na višem nivou u hijerarhiji komponenti, na zajedničkom roditeljskom elementu. To znači da više komponenti može deliti isto stanje.

Ova praksa se često koristi kada više komponenti treba da deli isto stanje, ili kada je stanje potrebno upravljati iz višeg nivoa kako bi se poboljšala efikasnost ili organizacija koda. Takođe, omogućava lakše održavanje aplikacije i smanjenje potencijalnih grešaka.

Kada "liftujemo" stanje komponente na viši nivo, obično to radimo tako što se stanje smešta u roditeljsku komponentu, a zatim se kao prop (svojstvo) prosleđuje detetu. Detetu se takođe prosleđuje funkcija (callback) koja omogućava da dete obavesti roditeljsku komponentu kada je potrebno promeniti stanje.

Evo jednostavnog primera: pretpostavimo da imamo dve komponente, roditeljsku (Parent) i dete (Child):

```jsx
// Roditeljska komponenta
function Parent() {
  const [count, setCount] = React.useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <h1>Brojač: {count}</h1>
      <Child count={count} onIncrement={increment} />
    </div>
  );
}

// Dete komponenta
function Child({ count, onIncrement }) {
  return (
    <div>
      <button onClick={onIncrement}>Povećaj brojač</button>
      <p>Trenutni broj: {count}</p>
    </div>
  );
}
```

U ovom primeru, stanje brojača (count) se nalazi u roditeljskoj komponenti (Parent), a prosleđuje se dete komponenti (Child) putem props-a. Takođe, funkcija za povećanje brojača (increment) se definiše u roditeljskoj komponenti i prosleđuje se detetu kako bi moglo interagovati s tim stanjem.

Na ovaj način, kada korisnik klikne na dugme "Povećaj brojač", dete će pozvati funkciju iz roditeljske komponente i obavestiti je o promeni stanja, koje se potom osvežava u celoj aplikaciji.